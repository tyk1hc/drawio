<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:128.0) Gecko/20100101 Firefox/128.0" version="28.0.7">
  <diagram name="Page-1" id="4AnDUFGYBO-_3WgCWL5g">
    <mxGraphModel dx="914" dy="1636" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="7SThADJdRw33NjqNuo1c-5" value="Subject" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=26;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="80" y="40" width="160" height="138" as="geometry" />
        </mxCell>
        <mxCell id="7SThADJdRw33NjqNuo1c-6" value="+ state: object" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="7SThADJdRw33NjqNuo1c-5">
          <mxGeometry y="26" width="160" height="26" as="geometry" />
        </mxCell>
        <mxCell id="7SThADJdRw33NjqNuo1c-7" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;strokeColor=inherit;" vertex="1" parent="7SThADJdRw33NjqNuo1c-5">
          <mxGeometry y="52" width="160" height="8" as="geometry" />
        </mxCell>
        <mxCell id="7SThADJdRw33NjqNuo1c-9" value="+ addObserver(type): type" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="7SThADJdRw33NjqNuo1c-5">
          <mxGeometry y="60" width="160" height="26" as="geometry" />
        </mxCell>
        <mxCell id="7SThADJdRw33NjqNuo1c-10" value="+ detach(type): type" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="7SThADJdRw33NjqNuo1c-5">
          <mxGeometry y="86" width="160" height="26" as="geometry" />
        </mxCell>
        <mxCell id="7SThADJdRw33NjqNuo1c-8" value="+ notifiy(type): type" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="7SThADJdRw33NjqNuo1c-5">
          <mxGeometry y="112" width="160" height="26" as="geometry" />
        </mxCell>
        <mxCell id="7SThADJdRw33NjqNuo1c-12" value="Observer" style="swimlane;fontStyle=1;align=center;verticalAlign=top;childLayout=stackLayout;horizontal=1;startSize=26;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="400" y="40" width="160" height="60" as="geometry" />
        </mxCell>
        <mxCell id="7SThADJdRw33NjqNuo1c-14" value="" style="line;strokeWidth=1;fillColor=none;align=left;verticalAlign=middle;spacingTop=-1;spacingLeft=3;spacingRight=3;rotatable=0;labelPosition=right;points=[];portConstraint=eastwest;strokeColor=inherit;" vertex="1" parent="7SThADJdRw33NjqNuo1c-12">
          <mxGeometry y="26" width="160" height="8" as="geometry" />
        </mxCell>
        <mxCell id="7SThADJdRw33NjqNuo1c-15" value="+ update: type" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="7SThADJdRw33NjqNuo1c-12">
          <mxGeometry y="34" width="160" height="26" as="geometry" />
        </mxCell>
        <mxCell id="7SThADJdRw33NjqNuo1c-16" value="&lt;b&gt;ConcreteSubject&lt;/b&gt;" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=26;fillColor=none;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="80" y="240" width="160" height="52" as="geometry" />
        </mxCell>
        <mxCell id="7SThADJdRw33NjqNuo1c-20" value="&lt;b&gt;ConcreteObserver&lt;/b&gt;" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=26;fillColor=none;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="400" y="240" width="160" height="52" as="geometry" />
        </mxCell>
        <mxCell id="7SThADJdRw33NjqNuo1c-21" value="" style="endArrow=open;html=1;endSize=12;startArrow=diamondThin;startSize=14;startFill=0;edgeStyle=orthogonalEdgeStyle;rounded=0;" edge="1" parent="1">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="240" y="69.5" as="sourcePoint" />
            <mxPoint x="400" y="69.5" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="7SThADJdRw33NjqNuo1c-22" value="0..n" style="edgeLabel;resizable=0;html=1;align=left;verticalAlign=top;" connectable="0" vertex="1" parent="7SThADJdRw33NjqNuo1c-21">
          <mxGeometry x="-1" relative="1" as="geometry" />
        </mxCell>
        <mxCell id="7SThADJdRw33NjqNuo1c-23" value="1" style="edgeLabel;resizable=0;html=1;align=right;verticalAlign=top;" connectable="0" vertex="1" parent="7SThADJdRw33NjqNuo1c-21">
          <mxGeometry x="1" relative="1" as="geometry" />
        </mxCell>
        <mxCell id="7SThADJdRw33NjqNuo1c-26" value="" style="endArrow=block;endFill=1;html=1;edgeStyle=orthogonalEdgeStyle;align=left;verticalAlign=top;rounded=0;entryX=0.5;entryY=1;entryDx=0;entryDy=0;" edge="1" parent="1" target="7SThADJdRw33NjqNuo1c-5">
          <mxGeometry x="-1" relative="1" as="geometry">
            <mxPoint x="160" y="239" as="sourcePoint" />
            <mxPoint x="320" y="239" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="7SThADJdRw33NjqNuo1c-28" value="" style="endArrow=block;endFill=1;html=1;edgeStyle=orthogonalEdgeStyle;align=left;verticalAlign=top;rounded=0;entryX=0.5;entryY=1;entryDx=0;entryDy=0;exitX=0.5;exitY=0;exitDx=0;exitDy=0;" edge="1" parent="1" source="7SThADJdRw33NjqNuo1c-20">
          <mxGeometry x="-1" relative="1" as="geometry">
            <mxPoint x="479.5" y="161" as="sourcePoint" />
            <mxPoint x="479.5" y="100" as="targetPoint" />
            <mxPoint as="offset" />
          </mxGeometry>
        </mxCell>
        <mxCell id="7SThADJdRw33NjqNuo1c-30" value="The Observer Pattern is a behavioral design pattern where an object, known as the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods.&#xa;&#xa;This pattern is commonly used to implement distributed event-handling systems, such as user interfaces, event listeners, or data-binding mechanisms." style="text;whiteSpace=wrap;fontSize=14;" vertex="1" parent="1">
          <mxGeometry x="40" y="-210" width="810" height="100" as="geometry" />
        </mxCell>
        <mxCell id="7SThADJdRw33NjqNuo1c-31" value="Definition&#xa;&#xa;The Observer Pattern defines a one-to-many dependency between objects so that when one object (subject) changes state, all its dependents (observers) are notified and updated automatically." style="text;whiteSpace=wrap;fontSize=14;" vertex="1" parent="1">
          <mxGeometry x="40" y="-80" width="800" height="70" as="geometry" />
        </mxCell>
        <mxCell id="7SThADJdRw33NjqNuo1c-32" value="&lt;div&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;Key Components&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Subject &lt;/b&gt;(&lt;b&gt;ISubject&lt;/b&gt;): Maintains a list of observers and defines methods for attaching, detaching, and notifying them.&lt;/li&gt;&lt;li&gt;&lt;b&gt;ConcreteSubject&lt;/b&gt;: Holds the state and notifies observers of changes.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Observer &lt;/b&gt;(&lt;b&gt;IObserver&lt;/b&gt;): Defines an interface for receiving updates.&lt;/li&gt;&lt;li&gt;&lt;b&gt;ConcreteObserver&lt;/b&gt;: Implements the Observer interface and reacts to state changes.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="80" y="320" width="720" height="120" as="geometry" />
        </mxCell>
        <mxCell id="7SThADJdRw33NjqNuo1c-33" value="&lt;div&gt;&lt;font style=&quot;font-size: 14px;&quot;&gt;Benefits&lt;/font&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;Loose Coupling: The subject (e.g. WeatherStation) doesn&#39;t need to know about the specific observers. It just notifies them.&lt;/li&gt;&lt;li&gt;Scalability: New observers (e.g., new display devices) can easily be added without changing the subject.&lt;/li&gt;&lt;li&gt;Flexiblity: Observers can be dynamically added or removed at runtime.&lt;/li&gt;&lt;li&gt;Promotes the &lt;strong data-end=&quot;4384&quot; data-start=&quot;4359&quot;&gt;Open/Closed Principle&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;" style="text;html=1;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="80" y="450" width="760" height="120" as="geometry" />
        </mxCell>
        <mxCell id="7SThADJdRw33NjqNuo1c-35" value="&lt;div&gt;Use Cases&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Event Listeners: GUI frameworks often use the Observer Pattern to implement event listeners for handling button clicks, input changes, etc.&lt;/li&gt;&lt;li&gt;Stock Price Monitoring: When a stock price changes, multiple subscribers (like investors or systems) can be notified of the change.&lt;/li&gt;&lt;li&gt;News Publishing Systems: News articles are published (subject), and subscribers (users) are notified whenever a new article is available.&lt;/li&gt;&lt;li&gt;Social Media Notifications: Users can subscribe to updates from specific accounts, and when an account posts (subject), all followers (observers) are notified.&lt;/li&gt;&lt;li&gt;Logging Systems: Different logging handlers can observe events and log them as needed, such as to the console, file, or remote servers.&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="1">
          <mxGeometry x="80" y="590" width="760" height="160" as="geometry" />
        </mxCell>
        <mxCell id="7SThADJdRw33NjqNuo1c-36" value="&lt;h2 data-start=&quot;4391&quot; data-end=&quot;4406&quot;&gt;&lt;font style=&quot;font-size: 14px; font-weight: normal;&quot;&gt;Drawbacks&lt;/font&gt;&lt;/h2&gt;&lt;ul data-start=&quot;4408&quot; data-end=&quot;4570&quot;&gt;&lt;li data-start=&quot;4408&quot; data-end=&quot;4473&quot;&gt;&lt;p data-start=&quot;4410&quot; data-end=&quot;4473&quot;&gt;Can lead to memory leaks if observers are not properly detached&lt;/p&gt;&lt;/li&gt;&lt;li data-start=&quot;4408&quot; data-end=&quot;4473&quot;&gt;&lt;p data-start=&quot;4410&quot; data-end=&quot;4473&quot;&gt;Unexpected updates if not carefully managed&lt;/p&gt;&lt;/li&gt;&lt;li data-start=&quot;4520&quot; data-end=&quot;4570&quot;&gt;&lt;p data-start=&quot;4522&quot; data-end=&quot;4570&quot;&gt;Can become complex when there are many observers&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="80" y="760" width="760" height="120" as="geometry" />
        </mxCell>
        <mxCell id="7SThADJdRw33NjqNuo1c-37" value="Subject (Stock Market)&#xa;-The stock market should maintain a list of observers (investors)&#xa;-It should have methods to register, remove, and notify observers.&#xa;-The setStockPrice method should update the stock price for a specific stock and notify all registered observers only if the price change exceeds a predefiend threshold.&#xa;&#xa;Observers&#xa;-Create two observer classes (e.g., InvestorA and InvestorB) that implement a common Observer interface.&#xa;-Each observer should implement an update method to receive notification about stock price changes.&#xa;Data Representation:&#xa;-Each stock can have attributes like stock symbol, current price, and a threshold for notification (e.g., a percentage change).&#xa;&#xa;The program will register two observers (InvestorA and InvestorB).&#xa;&#xa;It will notify both observers of significant stock price changes that exceed the predefined threshold.&#xa;If an observer is removed, they will no longer receive notifications for subsequent price changes.&#xa;The output will confirm which investors received notifications, showcasing the observer design pattern in action." style="text;whiteSpace=wrap;fontSize=14;" vertex="1" parent="1">
          <mxGeometry x="30" y="920" width="810" height="320" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
